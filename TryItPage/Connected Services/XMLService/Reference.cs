//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TryItPage.XMLService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="XMLService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Verification", ReplyAction="http://tempuri.org/IService1/VerificationResponse")]
        string Verification(string RULxml, string URLxsd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Verification", ReplyAction="http://tempuri.org/IService1/VerificationResponse")]
        System.Threading.Tasks.Task<string> VerificationAsync(string RULxml, string URLxsd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addComputer", ReplyAction="http://tempuri.org/IService1/addComputerResponse")]
        string addComputer(string screen_size, string brand, string model, string year, string Pro_Thread, string Pro_Arch_model, string Pro_Arch_generation, string Pro_clock, string Pro_cache, string[] Sto_cache, string Sto_main, string Sto_harddrive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addComputer", ReplyAction="http://tempuri.org/IService1/addComputerResponse")]
        System.Threading.Tasks.Task<string> addComputerAsync(string screen_size, string brand, string model, string year, string Pro_Thread, string Pro_Arch_model, string Pro_Arch_generation, string Pro_clock, string Pro_cache, string[] Sto_cache, string Sto_main, string Sto_harddrive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/XPathSearch", ReplyAction="http://tempuri.org/IService1/XPathSearchResponse")]
        string XPathSearch(string URLxml, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/XPathSearch", ReplyAction="http://tempuri.org/IService1/XPathSearchResponse")]
        System.Threading.Tasks.Task<string> XPathSearchAsync(string URLxml, string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TryItPage.XMLService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TryItPage.XMLService.IService1>, TryItPage.XMLService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public string Verification(string RULxml, string URLxsd) {
            return base.Channel.Verification(RULxml, URLxsd);
        }
        
        public System.Threading.Tasks.Task<string> VerificationAsync(string RULxml, string URLxsd) {
            return base.Channel.VerificationAsync(RULxml, URLxsd);
        }
        
        public string addComputer(string screen_size, string brand, string model, string year, string Pro_Thread, string Pro_Arch_model, string Pro_Arch_generation, string Pro_clock, string Pro_cache, string[] Sto_cache, string Sto_main, string Sto_harddrive) {
            return base.Channel.addComputer(screen_size, brand, model, year, Pro_Thread, Pro_Arch_model, Pro_Arch_generation, Pro_clock, Pro_cache, Sto_cache, Sto_main, Sto_harddrive);
        }
        
        public System.Threading.Tasks.Task<string> addComputerAsync(string screen_size, string brand, string model, string year, string Pro_Thread, string Pro_Arch_model, string Pro_Arch_generation, string Pro_clock, string Pro_cache, string[] Sto_cache, string Sto_main, string Sto_harddrive) {
            return base.Channel.addComputerAsync(screen_size, brand, model, year, Pro_Thread, Pro_Arch_model, Pro_Arch_generation, Pro_clock, Pro_cache, Sto_cache, Sto_main, Sto_harddrive);
        }
        
        public string XPathSearch(string URLxml, string path) {
            return base.Channel.XPathSearch(URLxml, path);
        }
        
        public System.Threading.Tasks.Task<string> XPathSearchAsync(string URLxml, string path) {
            return base.Channel.XPathSearchAsync(URLxml, path);
        }
    }
}
